{
	"info": {
		"_postman_id": "a16c5eaa-4610-452c-975b-7a25d2e622f9",
		"name": "Online-Store-Product-Project-01",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27405843",
		"_collection_link": "https://api-testing-team-7800.postman.co/workspace/API-Testing-Practice~8965867d-dfcc-49c9-a29b-94894bb6a65b/collection/27405843-a16c5eaa-4610-452c-975b-7a25d2e622f9?action=share&source=collection_link&creator=27405843"
	},
	"item": [
		{
			"name": "Online-store-single-test",
			"item": [
				{
					"name": "GetAllProducts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify status code for the request \r",
									"\r",
									"pm.test(\"verify status code for get products\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response time for the request \r",
									"\r",
									"pm.test(\"Check response time for the request\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.below(5000);\r",
									"});\r",
									"\r",
									"//verify content type header is available for the request \r",
									"\r",
									"pm.test(\"Verify the content type header\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//check response body is not empty \r",
									"\r",
									"pm.test(\"Verify response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"//verify fields are available for the request \r",
									"\r",
									"const getAllProducts = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify all fields are available\", function() {\r",
									"    pm.expect(getAllProducts[0]).to.have.property(\"id\");\r",
									"    pm.expect(getAllProducts[0]).to.have.property(\"title\");\r",
									"    pm.expect(getAllProducts[0]).to.have.property(\"price\");\r",
									"    pm.expect(getAllProducts[0]).to.have.property(\"description\");\r",
									"    pm.expect(getAllProducts[0]).to.have.property(\"category\");\r",
									"    pm.expect(getAllProducts[0]).to.have.property(\"image\");\r",
									"    pm.expect(getAllProducts[0]).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"//check field data types for the request \r",
									"\r",
									"pm.test(\"Verify field data types\", function() {\r",
									"    pm.expect(getAllProducts[0].id).to.be.a(\"number\");\r",
									"    pm.expect(getAllProducts[0].title).to.be.a(\"string\");\r",
									"    pm.expect(getAllProducts[0].price).to.be.a(\"number\");\r",
									"    pm.expect(getAllProducts[0].description).to.be.a(\"string\");\r",
									"    pm.expect(getAllProducts[0].category).to.be.a(\"string\");\r",
									"    pm.expect(getAllProducts[0].image).to.be.a(\"string\");\r",
									"    pm.expect(getAllProducts[0].rating).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"//verify field values for the request \r",
									"\r",
									"pm.test(\"Verify field values for the request\", function() {\r",
									"    pm.expect(getAllProducts[0].id).to.eql(1);\r",
									"    pm.expect(getAllProducts[0].title).to.eql(\"Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops\");\r",
									"    pm.expect(getAllProducts[0].price).to.eql(109.95);\r",
									"    pm.expect(getAllProducts[0].description).to.eql(\"Your perfect pack for everyday use and walks in the forest. Stash your laptop (up to 15 inches) in the padded sleeve, your everyday\");\r",
									"    pm.expect(getAllProducts[0].category).to.eql(\"men's clothing\");\r",
									"    pm.expect(getAllProducts[0].image).to.eql(\"https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg\");\r",
									"    pm.expect(getAllProducts[0].rating.rate).to.eql(3.9);\r",
									"});\r",
									"\r",
									"//check json schema for the request \r",
									"\r",
									"// const indvGetProduct = getAllProducts[0];\r",
									"// const indvGetProductSchema = {\r",
									"//       \"type\": \"object\",\r",
									"//       \"properties\": {\r",
									"//         \"id\": {\r",
									"//           \"type\": \"integer\"\r",
									"//         },\r",
									"//         \"title\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"price\": {\r",
									"//           \"type\": \"integer\"\r",
									"//         },\r",
									"//         \"description\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"category\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"image\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"rating\": {\r",
									"//           \"type\": \"object\",\r",
									"//           \"properties\": {\r",
									"//             \"rate\": {\r",
									"//               \"type\": \"number\"\r",
									"//             },\r",
									"//             \"count\": {\r",
									"//               \"type\": \"integer\"\r",
									"//             }\r",
									"//           },\r",
									"//           \"required\": [\r",
									"//             \"rate\",\r",
									"//             \"count\"\r",
									"//           ]\r",
									"//         }\r",
									"//       },\r",
									"//       \"required\": [\r",
									"//         \"id\",\r",
									"//         \"title\",\r",
									"//         \"price\",\r",
									"//         \"description\",\r",
									"//         \"category\",\r",
									"//         \"image\",\r",
									"//         \"rating\"\r",
									"//       ]\r",
									"//     };\r",
									"    \r",
									"// pm.test(\"Validate json schema for the request\", function() {\r",
									"//     pm.response.to.have.jsonSchema(indvGetProductSchema);\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{online-store-url}}products",
							"host": [
								"{{online-store-url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Single-Product",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"product-id\", 3);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify status code for the request \r",
									"\r",
									"pm.test(\"verify status code for get products\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response time for the request \r",
									"\r",
									"pm.test(\"Check response time for the request\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.below(5000);\r",
									"});\r",
									"\r",
									"//verify content type header is available for the request \r",
									"\r",
									"pm.test(\"Verify the content type header\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//check response body is not empty \r",
									"\r",
									"pm.test(\"Verify response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"//verify fields are available for the request \r",
									"\r",
									"const getSingleProduct = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify all fields are available\", function() {\r",
									"    pm.expect(getSingleProduct).to.have.property(\"id\");\r",
									"    pm.expect(getSingleProduct).to.have.property(\"title\");\r",
									"    pm.expect(getSingleProduct).to.have.property(\"price\");\r",
									"    pm.expect(getSingleProduct).to.have.property(\"description\");\r",
									"    pm.expect(getSingleProduct).to.have.property(\"category\");\r",
									"    pm.expect(getSingleProduct).to.have.property(\"image\");\r",
									"    pm.expect(getSingleProduct).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"//check field data types for the request \r",
									"\r",
									"pm.test(\"Verify field data types\", function() {\r",
									"    pm.expect(getSingleProduct.id).to.be.a(\"number\");\r",
									"    pm.expect(getSingleProduct.title).to.be.a(\"string\");\r",
									"    pm.expect(getSingleProduct.price).to.be.a(\"number\");\r",
									"    pm.expect(getSingleProduct.description).to.be.a(\"string\");\r",
									"    pm.expect(getSingleProduct.category).to.be.a(\"string\");\r",
									"    pm.expect(getSingleProduct.image).to.be.a(\"string\");\r",
									"    pm.expect(getSingleProduct.rating).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"//verify field values for the request \r",
									"\r",
									"pm.test(\"Verify field values for the single product request\", function() {\r",
									"    pm.expect(getSingleProduct.id).to.eql(3);\r",
									"    pm.expect(getSingleProduct.title).to.eql(\"Mens Cotton Jacket\");\r",
									"    pm.expect(getSingleProduct.price).to.eql(55.99);\r",
									"    pm.expect(getSingleProduct.description).to.eql(\"great outerwear jackets for Spring/Autumn/Winter, suitable for many occasions, such as working, hiking, camping, mountain/rock climbing, cycling, traveling or other outdoors. Good gift choice for you or your family member. A warm hearted love to Father, husband or son in this thanksgiving or Christmas Day.\");\r",
									"    pm.expect(getSingleProduct.category).to.eql(\"men's clothing\");\r",
									"    pm.expect(getSingleProduct.image).to.eql(\"https://fakestoreapi.com/img/71li-ujtlUL._AC_UX679_.jpg\");\r",
									"    pm.expect(getSingleProduct.rating.rate).to.eql(4.7);\r",
									"});\r",
									"\r",
									"//check json schema for the request \r",
									"\r",
									"// const GetProductSchema = {\r",
									"//       \"type\": \"object\",\r",
									"//       \"properties\": {\r",
									"//         \"id\": {\r",
									"//           \"type\": \"integer\"\r",
									"//         },\r",
									"//         \"title\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"price\": {\r",
									"//           \"type\": \"number\"\r",
									"//         },\r",
									"//         \"description\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"category\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"image\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"rating\": {\r",
									"//           \"type\": \"object\",\r",
									"//           \"properties\": {\r",
									"//             \"rate\": {\r",
									"//               \"type\": \"number\"\r",
									"//             },\r",
									"//             \"count\": {\r",
									"//               \"type\": \"integer\"\r",
									"//             }\r",
									"//           },\r",
									"//           \"required\": [\r",
									"//             \"rate\",\r",
									"//             \"count\"\r",
									"//           ]\r",
									"//         }\r",
									"//       },\r",
									"//       \"required\": [\r",
									"//         \"id\",\r",
									"//         \"title\",\r",
									"//         \"price\",\r",
									"//         \"description\",\r",
									"//         \"category\",\r",
									"//         \"image\",\r",
									"//         \"rating\"\r",
									"//       ]\r",
									"//     };\r",
									"    \r",
									"// pm.test(\"Validate json schema for the request\", function() {\r",
									"//     pm.response.to.have.jsonSchema(GetProductSchema);\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{online-store-url}}products/{{product-id}}",
							"host": [
								"{{online-store-url}}products"
							],
							"path": [
								"{{product-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Limited-Products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"product-limit\", 3);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify status code for the request \r",
									"\r",
									"pm.test(\"verify status code for get products\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response time for the request \r",
									"\r",
									"pm.test(\"Check response time for the request\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.below(5000);\r",
									"});\r",
									"\r",
									"//verify content type header is available for the request \r",
									"\r",
									"pm.test(\"Verify the content type header\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//check response body is not empty \r",
									"\r",
									"pm.test(\"Verify response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"//verify fields are available for the request \r",
									"\r",
									"const getLimitedProducts = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify all fields are available\", function() {\r",
									"    pm.expect(getLimitedProducts[0]).to.have.property(\"id\");\r",
									"    pm.expect(getLimitedProducts[0]).to.have.property(\"title\");\r",
									"    pm.expect(getLimitedProducts[0]).to.have.property(\"price\");\r",
									"    pm.expect(getLimitedProducts[0]).to.have.property(\"description\");\r",
									"    pm.expect(getLimitedProducts[0]).to.have.property(\"category\");\r",
									"    pm.expect(getLimitedProducts[0]).to.have.property(\"image\");\r",
									"    pm.expect(getLimitedProducts[0]).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"//check field data types for the request \r",
									"\r",
									"pm.test(\"Verify field data types\", function() {\r",
									"    pm.expect(getLimitedProducts[0].id).to.be.a(\"number\");\r",
									"    pm.expect(getLimitedProducts[0].title).to.be.a(\"string\");\r",
									"    pm.expect(getLimitedProducts[0].price).to.be.a(\"number\");\r",
									"    pm.expect(getLimitedProducts[0].description).to.be.a(\"string\");\r",
									"    pm.expect(getLimitedProducts[0].category).to.be.a(\"string\");\r",
									"    pm.expect(getLimitedProducts[0].image).to.be.a(\"string\");\r",
									"    pm.expect(getLimitedProducts[0].rating).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"//verify field values for the request \r",
									"\r",
									"pm.test(\"Verify field values for the request\", function() {\r",
									"    pm.expect(getLimitedProducts[0].id).to.eql(1);\r",
									"    pm.expect(getLimitedProducts[0].title).to.eql(\"Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops\");\r",
									"    pm.expect(getLimitedProducts[0].price).to.eql(109.95);\r",
									"    pm.expect(getLimitedProducts[0].description).to.eql(\"Your perfect pack for everyday use and walks in the forest. Stash your laptop (up to 15 inches) in the padded sleeve, your everyday\");\r",
									"    pm.expect(getLimitedProducts[0].category).to.eql(\"men's clothing\");\r",
									"    pm.expect(getLimitedProducts[0].image).to.eql(\"https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg\");\r",
									"    pm.expect(getLimitedProducts[0].rating.rate).to.eql(3.9);\r",
									"});\r",
									"\r",
									"//check json schema for the request \r",
									"\r",
									"// const indvGetProduct = getLimitedProducts;\r",
									"// const indvGetProductSchema = \r",
									"//     {\r",
									"//       \"type\": \"object\",\r",
									"//       \"properties\": {\r",
									"//         \"id\": {\r",
									"//           \"type\": \"integer\"\r",
									"//         },\r",
									"//         \"title\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"price\": {\r",
									"//           \"type\": \"integer\"\r",
									"//         },\r",
									"//         \"description\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"category\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"image\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"rating\": {\r",
									"//           \"type\": \"object\",\r",
									"//           \"properties\": {\r",
									"//             \"rate\": {\r",
									"//               \"type\": \"number\"\r",
									"//             },\r",
									"//             \"count\": {\r",
									"//               \"type\": \"integer\"\r",
									"//             }\r",
									"//           },\r",
									"//           \"required\": [\r",
									"//             \"rate\",\r",
									"//             \"count\"\r",
									"//           ]\r",
									"//         }\r",
									"//       },\r",
									"//       \"required\": [\r",
									"//         \"id\",\r",
									"//         \"title\",\r",
									"//         \"price\",\r",
									"//         \"description\",\r",
									"//         \"category\",\r",
									"//         \"image\",\r",
									"//         \"rating\"\r",
									"//       ]\r",
									"//     };\r",
									"    \r",
									"// pm.test(\"Validate json schema for the request\", function() {\r",
									"//     pm.response.to.have.jsonSchema(indvGetProductSchema);\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{online-store-url}}products?limit={{product-limit}}",
							"host": [
								"{{online-store-url}}products"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{product-limit}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Sorted-Products",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"product-sort\", \"desc\")"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify status code for the request \r",
									"\r",
									"pm.test(\"verify status code for get products\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response time for the request \r",
									"\r",
									"pm.test(\"Check response time for the request\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.below(5000);\r",
									"});\r",
									"\r",
									"//verify content type header is available for the request \r",
									"\r",
									"pm.test(\"Verify the content type header\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//check response body is not empty \r",
									"\r",
									"pm.test(\"Verify response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"//verify fields are available for the request \r",
									"\r",
									"const getSortedProducts = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify all fields are available\", function() {\r",
									"    pm.expect(getSortedProducts[0]).to.have.property(\"id\");\r",
									"    pm.expect(getSortedProducts[0]).to.have.property(\"title\");\r",
									"    pm.expect(getSortedProducts[0]).to.have.property(\"price\");\r",
									"    pm.expect(getSortedProducts[0]).to.have.property(\"description\");\r",
									"    pm.expect(getSortedProducts[0]).to.have.property(\"category\");\r",
									"    pm.expect(getSortedProducts[0]).to.have.property(\"image\");\r",
									"    pm.expect(getSortedProducts[0]).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"//check field data types for the request \r",
									"\r",
									"pm.test(\"Verify field data types\", function() {\r",
									"    pm.expect(getSortedProducts[0].id).to.be.a(\"number\");\r",
									"    pm.expect(getSortedProducts[0].title).to.be.a(\"string\");\r",
									"    pm.expect(getSortedProducts[0].price).to.be.a(\"number\");\r",
									"    pm.expect(getSortedProducts[0].description).to.be.a(\"string\");\r",
									"    pm.expect(getSortedProducts[0].category).to.be.a(\"string\");\r",
									"    pm.expect(getSortedProducts[0].image).to.be.a(\"string\");\r",
									"    pm.expect(getSortedProducts[0].rating).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"//verify field values for the request \r",
									"\r",
									"pm.test(\"Verify field values for the request\", function() {\r",
									"    pm.expect(getSortedProducts[19].id).to.eql(1);\r",
									"    pm.expect(getSortedProducts[19].title).to.eql(\"Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops\");\r",
									"    pm.expect(getSortedProducts[19].price).to.eql(109.95);\r",
									"    pm.expect(getSortedProducts[19].description).to.eql(\"Your perfect pack for everyday use and walks in the forest. Stash your laptop (up to 15 inches) in the padded sleeve, your everyday\");\r",
									"    pm.expect(getSortedProducts[19].category).to.eql(\"men's clothing\");\r",
									"    pm.expect(getSortedProducts[19].image).to.eql(\"https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg\");\r",
									"    pm.expect(getSortedProducts[19].rating.rate).to.eql(3.9);\r",
									"});\r",
									"\r",
									"//check json schema for the request \r",
									"\r",
									"// const indvGetProduct = getSortedProducts[0];\r",
									"// const indvSortedGetProductSchema = \r",
									"//     {\r",
									"//       \"type\": \"object\",\r",
									"//       \"properties\": {\r",
									"//         \"id\": {\r",
									"//           \"type\": \"integer\"\r",
									"//         },\r",
									"//         \"title\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"price\": {\r",
									"//           \"type\": \"number\"\r",
									"//         },\r",
									"//         \"description\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"category\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"image\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"rating\": {\r",
									"//           \"type\": \"object\",\r",
									"//           \"properties\": {\r",
									"//             \"rate\": {\r",
									"//               \"type\": \"number\"\r",
									"//             },\r",
									"//             \"count\": {\r",
									"//               \"type\": \"integer\"\r",
									"//             }\r",
									"//           },\r",
									"//           \"required\": [\r",
									"//             \"rate\",\r",
									"//             \"count\"\r",
									"//           ]\r",
									"//         }\r",
									"//       },\r",
									"//       \"required\": [\r",
									"//         \"id\",\r",
									"//         \"title\",\r",
									"//         \"price\",\r",
									"//         \"description\",\r",
									"//         \"category\",\r",
									"//         \"image\",\r",
									"//         \"rating\"\r",
									"//       ]\r",
									"//     };\r",
									"    \r",
									"// pm.test(\"Validate json schema for the request\", function() {\r",
									"//     pm.response.to.have.jsonSchema(indvSortedGetProductSchema);\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{online-store-url}}products?sort={{product-sort}}",
							"host": [
								"{{online-store-url}}products"
							],
							"query": [
								{
									"key": "sort",
									"value": "{{product-sort}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Limit-Sort-Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify status code for the request \r",
									"\r",
									"pm.test(\"verify status code for get products\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response time for the request \r",
									"\r",
									"pm.test(\"Check response time for the request\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.below(5000);\r",
									"});\r",
									"\r",
									"//verify content type header is available for the request \r",
									"\r",
									"pm.test(\"Verify the content type header\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//check response body is not empty \r",
									"\r",
									"pm.test(\"Verify response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"//verify fields are available for the request \r",
									"\r",
									"const getLimitSortedProducts = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify all fields are available\", function() {\r",
									"    pm.expect(getLimitSortedProducts[0]).to.have.property(\"id\");\r",
									"    pm.expect(getLimitSortedProducts[0]).to.have.property(\"title\");\r",
									"    pm.expect(getLimitSortedProducts[0]).to.have.property(\"price\");\r",
									"    pm.expect(getLimitSortedProducts[0]).to.have.property(\"description\");\r",
									"    pm.expect(getLimitSortedProducts[0]).to.have.property(\"category\");\r",
									"    pm.expect(getLimitSortedProducts[0]).to.have.property(\"image\");\r",
									"    pm.expect(getLimitSortedProducts[0]).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"//check field data types for the request \r",
									"\r",
									"pm.test(\"Verify field data types\", function() {\r",
									"    pm.expect(getLimitSortedProducts[0].id).to.be.a(\"number\");\r",
									"    pm.expect(getLimitSortedProducts[0].title).to.be.a(\"string\");\r",
									"    pm.expect(getLimitSortedProducts[0].price).to.be.a(\"number\");\r",
									"    pm.expect(getLimitSortedProducts[0].description).to.be.a(\"string\");\r",
									"    pm.expect(getLimitSortedProducts[0].category).to.be.a(\"string\");\r",
									"    pm.expect(getLimitSortedProducts[0].image).to.be.a(\"string\");\r",
									"    pm.expect(getLimitSortedProducts[0].rating).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"//verify field values for the request \r",
									"\r",
									"pm.test(\"Verify field values for the request\", function() {\r",
									"    pm.expect(getLimitSortedProducts[2].id).to.eql(1);\r",
									"    pm.expect(getLimitSortedProducts[2].title).to.eql(\"Fjallraven - Foldsack No. 1 Backpack, Fits 15 Laptops\");\r",
									"    pm.expect(getLimitSortedProducts[2].price).to.eql(109.95);\r",
									"    pm.expect(getLimitSortedProducts[2].description).to.eql(\"Your perfect pack for everyday use and walks in the forest. Stash your laptop (up to 15 inches) in the padded sleeve, your everyday\");\r",
									"    pm.expect(getLimitSortedProducts[2].category).to.eql(\"men's clothing\");\r",
									"    pm.expect(getLimitSortedProducts[2].image).to.eql(\"https://fakestoreapi.com/img/81fPKd-2AYL._AC_SL1500_.jpg\");\r",
									"    pm.expect(getLimitSortedProducts[2].rating.rate).to.eql(3.9);\r",
									"});\r",
									"\r",
									"//check json schema for the request \r",
									"\r",
									"// const indvGetSortedProduct = getLimitSortedProducts[0];\r",
									"// const indvLimitSortedGetProductSchema = \r",
									"//     {\r",
									"//       \"type\": \"object\",\r",
									"//       \"properties\": {\r",
									"//         \"id\": {\r",
									"//           \"type\": \"integer\"\r",
									"//         },\r",
									"//         \"title\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"price\": {\r",
									"//           \"type\": \"number\"\r",
									"//         },\r",
									"//         \"description\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"category\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"image\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"rating\": {\r",
									"//           \"type\": \"object\",\r",
									"//           \"properties\": {\r",
									"//             \"rate\": {\r",
									"//               \"type\": \"number\"\r",
									"//             },\r",
									"//             \"count\": {\r",
									"//               \"type\": \"integer\"\r",
									"//             }\r",
									"//           },\r",
									"//           \"required\": [\r",
									"//             \"rate\",\r",
									"//             \"count\"\r",
									"//           ]\r",
									"//         }\r",
									"//       },\r",
									"//       \"required\": [\r",
									"//         \"id\",\r",
									"//         \"title\",\r",
									"//         \"price\",\r",
									"//         \"description\",\r",
									"//         \"category\",\r",
									"//         \"image\",\r",
									"//         \"rating\"\r",
									"//       ]\r",
									"//     };\r",
									"    \r",
									"// pm.test(\"Validate json schema for the request\", function() {\r",
									"//     pm.response.to.have.jsonSchema(indvLimitSortedGetProductSchema);\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{online-store-url}}products?limit={{product-limit}}&sort={{product-sort}}",
							"host": [
								"{{online-store-url}}products"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{product-limit}}"
								},
								{
									"key": "sort",
									"value": "{{product-sort}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-Product-Categories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"product-category\", \"women's clothing\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify status code for the request \r",
									"\r",
									"pm.test(\"verify status code for get products\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response time for the request \r",
									"\r",
									"pm.test(\"Check response time for the request\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.below(5000);\r",
									"});\r",
									"\r",
									"//verify content type header is available for the request \r",
									"\r",
									"pm.test(\"Verify the content type header\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//check response body is not empty \r",
									"\r",
									"pm.test(\"Verify response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"//verify fields are available for the request \r",
									"\r",
									"const categoryProducts = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify all fields are available\", function() {\r",
									"    pm.expect(categoryProducts[0]).to.have.property(\"id\");\r",
									"    pm.expect(categoryProducts[0]).to.have.property(\"title\");\r",
									"    pm.expect(categoryProducts[0]).to.have.property(\"price\");\r",
									"    pm.expect(categoryProducts[0]).to.have.property(\"description\");\r",
									"    pm.expect(categoryProducts[0]).to.have.property(\"category\");\r",
									"    pm.expect(categoryProducts[0]).to.have.property(\"image\");\r",
									"    pm.expect(categoryProducts[0]).to.have.property(\"rating\");\r",
									"});\r",
									"\r",
									"//check field data types for the request \r",
									"\r",
									"pm.test(\"Verify field data types\", function() {\r",
									"    pm.expect(categoryProducts[0].id).to.be.a(\"number\");\r",
									"    pm.expect(categoryProducts[0].title).to.be.a(\"string\");\r",
									"    pm.expect(categoryProducts[0].price).to.be.a(\"number\");\r",
									"    pm.expect(categoryProducts[0].description).to.be.a(\"string\");\r",
									"    pm.expect(categoryProducts[0].category).to.be.a(\"string\");\r",
									"    pm.expect(categoryProducts[0].image).to.be.a(\"string\");\r",
									"    pm.expect(categoryProducts[0].rating).to.be.a(\"object\");\r",
									"});\r",
									"\r",
									"//verify field values for the request \r",
									"\r",
									"pm.test(\"Verify field values for the request\", function() {\r",
									"    pm.expect(categoryProducts[0].id).to.eql(15);\r",
									"    pm.expect(categoryProducts[0].title).to.eql(\"BIYLACLESEN Women's 3-in-1 Snowboard Jacket Winter Coats\");\r",
									"    pm.expect(categoryProducts[0].price).to.eql(56.99);\r",
									"    pm.expect(categoryProducts[0].description).to.eql(\"Note:The Jackets is US standard size, Please choose size as your usual wear Material: 100% Polyester; Detachable Liner Fabric: Warm Fleece. Detachable Functional Liner: Skin Friendly, Lightweigt and Warm.Stand Collar Liner jacket, keep you warm in cold weather. Zippered Pockets: 2 Zippered Hand Pockets, 2 Zippered Pockets on Chest (enough to keep cards or keys)and 1 Hidden Pocket Inside.Zippered Hand Pockets and Hidden Pocket keep your things secure. Humanized Design: Adjustable and Detachable Hood and Adjustable cuff to prevent the wind and water,for a comfortable fit. 3 in 1 Detachable Design provide more convenience, you can separate the coat and inner as needed, or wear it together. It is suitable for different season and help you adapt to different climates\");\r",
									"    pm.expect(categoryProducts[0].category).to.eql(\"women's clothing\");\r",
									"    pm.expect(categoryProducts[0].image).to.eql(\"https://fakestoreapi.com/img/51Y5NI-I5jL._AC_UX679_.jpg\");\r",
									"    pm.expect(categoryProducts[0].rating.rate).to.eql(2.6);\r",
									"});\r",
									"\r",
									"//check json schema for the request \r",
									"\r",
									"// const indvGetCategoryProduct = categoryProducts[0];\r",
									"// const indvGetCategoryProductSchema = \r",
									"//     {\r",
									"//       \"type\": \"object\",\r",
									"//       \"properties\": {\r",
									"//         \"id\": {\r",
									"//           \"type\": \"integer\"\r",
									"//         },\r",
									"//         \"title\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"price\": {\r",
									"//           \"type\": \"number\"\r",
									"//         },\r",
									"//         \"description\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"category\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"image\": {\r",
									"//           \"type\": \"string\"\r",
									"//         },\r",
									"//         \"rating\": {\r",
									"//           \"type\": \"object\",\r",
									"//           \"properties\": {\r",
									"//             \"rate\": {\r",
									"//               \"type\": \"number\"\r",
									"//             },\r",
									"//             \"count\": {\r",
									"//               \"type\": \"integer\"\r",
									"//             }\r",
									"//           },\r",
									"//           \"required\": [\r",
									"//             \"rate\",\r",
									"//             \"count\"\r",
									"//           ]\r",
									"//         }\r",
									"//       },\r",
									"//       \"required\": [\r",
									"//         \"id\",\r",
									"//         \"title\",\r",
									"//         \"price\",\r",
									"//         \"description\",\r",
									"//         \"category\",\r",
									"//         \"image\",\r",
									"//         \"rating\"\r",
									"//       ]\r",
									"//     };\r",
									"    \r",
									"// pm.test(\"Validate json schema for the request\", function() {\r",
									"//     pm.response.to.have.jsonSchema(indvGetCategoryProductSchema);\r",
									"// });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{online-store-url}}/products/category/{{product-category}}",
							"host": [
								"{{online-store-url}}"
							],
							"path": [
								"products",
								"category",
								"{{product-category}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get-All-Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify status code for the request \r",
									"\r",
									"pm.test(\"verify status code for get products\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response time for the request \r",
									"\r",
									"pm.test(\"Check response time for the request\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.below(5000);\r",
									"});\r",
									"\r",
									"//verify content type header is available for the request \r",
									"\r",
									"pm.test(\"Verify the content type header\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//check response body is not empty \r",
									"\r",
									"pm.test(\"Verify response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"//verify fields are available for the request \r",
									"\r",
									"const categoryList = pm.response.json();\r",
									"\r",
									"\r",
									"\r",
									"//check field data types for the request \r",
									"\r",
									"pm.test(\"Verify field data types\", function() {\r",
									"    pm.expect(categoryList).to.be.an(\"array\");\r",
									"});\r",
									"\r",
									"//verify field values for the request \r",
									"\r",
									"pm.test(\"Verify field values for the request\", function() {\r",
									"    pm.expect(categoryList[0]).to.eql(\"electronics\");\r",
									"    pm.expect(categoryList[1]).to.eql(\"jewelery\");\r",
									"    pm.expect(categoryList[2]).to.eql(\"men's clothing\");\r",
									"    pm.expect(categoryList[3]).to.eql(\"women's clothing\");\r",
									"});\r",
									"\r",
									"//check json schema for the request \r",
									"\r",
									"\r",
									"const indvCategoryListSchema = \r",
									"{\r",
									"  \"type\": \"array\",\r",
									"  \"items\": [\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  ]\r",
									"}\r",
									"    \r",
									"pm.test(\"Validate json schema for the request\", function() {\r",
									"    pm.response.to.have.jsonSchema(indvCategoryListSchema);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{online-store-url}}products/categories",
							"host": [
								"{{online-store-url}}products"
							],
							"path": [
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add-Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify status code for the request \r",
									"\r",
									"pm.test(\"verify status code for get products\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response time for the request \r",
									"\r",
									"pm.test(\"Check response time for the request\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.below(5000);\r",
									"});\r",
									"\r",
									"//verify content type header is available for the request \r",
									"\r",
									"pm.test(\"Verify the content type header\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//check response body is not empty \r",
									"\r",
									"pm.test(\"Verify response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"//verify fields are available for the request \r",
									"\r",
									"const createProduct = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify all fields are available\", function() {\r",
									"    pm.expect(createProduct).to.have.property(\"id\");\r",
									"    pm.expect(createProduct).to.have.property(\"title\");\r",
									"    pm.expect(createProduct).to.have.property(\"price\");\r",
									"    pm.expect(createProduct).to.have.property(\"description\");\r",
									"    pm.expect(createProduct).to.have.property(\"category\");\r",
									"    pm.expect(createProduct).to.have.property(\"image\");\r",
									"\r",
									"});\r",
									"\r",
									"//check field data types for the request \r",
									"\r",
									"pm.test(\"Verify field data types\", function() {\r",
									"    pm.expect(createProduct.id).to.be.a(\"number\");\r",
									"    pm.expect(createProduct.title).to.be.a(\"string\");\r",
									"    pm.expect(createProduct.price).to.be.a(\"string\");\r",
									"    pm.expect(createProduct.description).to.be.a(\"string\");\r",
									"    pm.expect(createProduct.category).to.be.a(\"string\");\r",
									"    pm.expect(createProduct.image).to.be.a(\"string\");\r",
									"   \r",
									"});\r",
									"\r",
									"//verify field values for the request \r",
									"\r",
									"\r",
									"//check json schema for the request \r",
									"\r",
									"// const addProductSchema = {\r",
									"//   \"type\": \"object\",\r",
									"//   \"properties\": {\r",
									"//     \"id\": {\r",
									"//       \"type\": \"integer\"\r",
									"//     },\r",
									"//     \"title\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//     \"price\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//     \"description\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//     \"image\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//     \"category\": {\r",
									"//       \"type\": \"string\"\r",
									"//     }\r",
									"//   },\r",
									"//   \"required\": [\r",
									"//     \"id\",\r",
									"//     \"title\",\r",
									"//     \"price\",\r",
									"//     \"description\",\r",
									"//     \"image\",\r",
									"//     \"category\"\r",
									"//   ]\r",
									"// }\r",
									"\r",
									"// pm.test(\"Validate json schema for the request\", function() {\r",
									"//     pm.response.to.have.jsonSchema(addProductSchema);\r",
									"// });\r",
									"\r",
									"\r",
									"pm.collectionVariables.set(\"created-id\", createProduct.id);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let title = Math.random().toString(36).substring(2);\r",
									"pm.collectionVariables.set(\"product-title\", title);\r",
									"\r",
									"let price = (Math.random() * 100).toFixed(2);\r",
									"pm.collectionVariables.set(\"product-price\", price);\r",
									"\r",
									"let desc = Math.random().toString(36).substring(2);\r",
									"pm.collectionVariables.set(\"product-desc\", desc);\r",
									"\r",
									"let domain = Math.random().toString(36).substring(2, 10); // random domain\r",
									"let tld = ['.com', '.net', '.org', '.io'][Math.floor(Math.random() * 4)]; // random TLD\r",
									"let path = Math.random().toString(36).substring(2, 8); // random path\r",
									"\r",
									"let image = \"https://\" + domain + tld;\r",
									"\r",
									"pm.collectionVariables.set(\"product-img\", image);\r",
									"\r",
									"let category = Math.random().toString(36).substring(2);\r",
									"pm.collectionVariables.set(\"product-cate\", category);\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"{{product-title}}\",\r\n    \"price\" : \"{{product-price}}\",\r\n    \"description\" : \"{{product-desc}}\",\r\n    \"image\": \"{{product-img}}\",\r\n    \"category\": \"{{product-cate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{online-store-url}}products",
							"host": [
								"{{online-store-url}}products"
							]
						}
					},
					"response": []
				},
				{
					"name": "Partial-Update-Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify status code for the request \r",
									"\r",
									"pm.test(\"verify status code for get products\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response time for the request \r",
									"\r",
									"pm.test(\"Check response time for the request\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.below(5000);\r",
									"});\r",
									"\r",
									"//verify content type header is available for the request \r",
									"\r",
									"pm.test(\"Verify the content type header\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//check response body is not empty \r",
									"\r",
									"pm.test(\"Verify response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"//verify fields are available for the request \r",
									"\r",
									"const partialUpdateProduct = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify all fields are available\", function() {\r",
									"    pm.expect(partialUpdateProduct).to.have.property(\"id\");\r",
									"    pm.expect(partialUpdateProduct).to.have.property(\"title\");\r",
									"    pm.expect(partialUpdateProduct).to.have.property(\"price\");\r",
									"    pm.expect(partialUpdateProduct).to.have.property(\"description\");\r",
									"});\r",
									"\r",
									"//check field data types for the request \r",
									"\r",
									"pm.test(\"Verify field data types\", function() {\r",
									"    pm.expect(partialUpdateProduct.id).to.be.a(\"number\");\r",
									"    pm.expect(partialUpdateProduct.title).to.be.a(\"string\");\r",
									"    pm.expect(partialUpdateProduct.price).to.be.a(\"string\");\r",
									"    pm.expect(partialUpdateProduct.description).to.be.a(\"string\");   \r",
									"});\r",
									"\r",
									"//check json schema for the request \r",
									"\r",
									"// const partialUpdProductSchema = {\r",
									"//   \"type\": \"object\",\r",
									"//   \"properties\": {\r",
									"//     \"id\": {\r",
									"//       \"type\": \"integer\"\r",
									"//     },\r",
									"//     \"title\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//     \"price\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//     \"description\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//   },\r",
									"//   \"required\": [\r",
									"//     \"id\",\r",
									"//     \"title\",\r",
									"//     \"price\",\r",
									"//     \"description\"\r",
									"//   ]\r",
									"// }\r",
									"\r",
									"// pm.test(\"Validate json schema for the request\", function() {\r",
									"//     pm.response.to.have.jsonSchema(partialUpdProductSchema);\r",
									"// });\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let title = Math.random().toString(36).substring(2);\r",
									"pm.collectionVariables.set(\"product-title\", title);\r",
									"\r",
									"let price = (Math.random() * 100).toFixed(2);\r",
									"pm.collectionVariables.set(\"product-price\", price);\r",
									"\r",
									"let desc = Math.random().toString(36).substring(2);\r",
									"pm.collectionVariables.set(\"product-desc\", desc);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"{{product-title}}\",\r\n    \"price\" : \"{{product-price}}\",\r\n    \"description\" : \"{{product-desc}}\"\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{online-store-url}}products/{{created-id}}",
							"host": [
								"{{online-store-url}}products"
							],
							"path": [
								"{{created-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete-Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify status code for the request \r",
									"\r",
									"pm.test(\"verify status code for get products\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response time for the request \r",
									"\r",
									"pm.test(\"Check response time for the request\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.below(5000);\r",
									"});\r",
									"\r",
									"//verify content type header is available for the request \r",
									"\r",
									"pm.test(\"Verify the content type header\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{online-store-url}}products/{{created-id}}",
							"host": [
								"{{online-store-url}}products"
							],
							"path": [
								"{{created-id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update-Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//verify status code for the request \r",
									"\r",
									"pm.test(\"verify status code for get products\", function() {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//check response time for the request \r",
									"\r",
									"pm.test(\"Check response time for the request\", function() {\r",
									"    pm.expect(pm.response.responseTime).to.below(5000);\r",
									"});\r",
									"\r",
									"//verify content type header is available for the request \r",
									"\r",
									"pm.test(\"Verify the content type header\", function() {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
									"});\r",
									"\r",
									"//check response body is not empty \r",
									"\r",
									"pm.test(\"Verify response body is not empty\", function() {\r",
									"    pm.expect(pm.response.text()).to.not.be.empty;\r",
									"});\r",
									"\r",
									"//verify fields are available for the request \r",
									"\r",
									"const updateProduct = pm.response.json();\r",
									"\r",
									"pm.test(\"Verify all fields are available\", function() {\r",
									"    pm.expect(updateProduct).to.have.property(\"id\");\r",
									"    pm.expect(updateProduct).to.have.property(\"title\");\r",
									"    pm.expect(updateProduct).to.have.property(\"price\");\r",
									"    pm.expect(updateProduct).to.have.property(\"description\");\r",
									"    pm.expect(updateProduct).to.have.property(\"category\");\r",
									"    pm.expect(updateProduct).to.have.property(\"image\");\r",
									"\r",
									"});\r",
									"\r",
									"//check field data types for the request \r",
									"\r",
									"pm.test(\"Verify field data types\", function() {\r",
									"    pm.expect(updateProduct.id).to.be.a(\"number\");\r",
									"    pm.expect(updateProduct.title).to.be.a(\"string\");\r",
									"    pm.expect(updateProduct.price).to.be.a(\"string\");\r",
									"    pm.expect(updateProduct.description).to.be.a(\"string\");\r",
									"    pm.expect(updateProduct.category).to.be.a(\"string\");\r",
									"    pm.expect(updateProduct.image).to.be.a(\"string\");\r",
									"   \r",
									"});\r",
									"\r",
									"//verify field values for the request \r",
									"\r",
									"\r",
									"//check json schema for the request \r",
									"\r",
									"// const updateProductSchema = {\r",
									"//   \"type\": \"object\",\r",
									"//   \"properties\": {\r",
									"//     \"id\": {\r",
									"//       \"type\": \"integer\"\r",
									"//     },\r",
									"//     \"title\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//     \"price\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//     \"description\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//     \"image\": {\r",
									"//       \"type\": \"string\"\r",
									"//     },\r",
									"//     \"category\": {\r",
									"//       \"type\": \"string\"\r",
									"//     }\r",
									"//   },\r",
									"//   \"required\": [\r",
									"//     \"id\",\r",
									"//     \"title\",\r",
									"//     \"price\",\r",
									"//     \"description\",\r",
									"//     \"image\",\r",
									"//     \"category\"\r",
									"//   ]\r",
									"// }\r",
									"\r",
									"// pm.test(\"Validate json schema for the request\", function() {\r",
									"//     pm.response.to.have.jsonSchema(updateProductSchema);\r",
									"// });\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let title = Math.random().toString(36).substring(2);\r",
									"pm.collectionVariables.set(\"product-title\", title);\r",
									"\r",
									"let price = (Math.random() * 100).toFixed(2);\r",
									"pm.collectionVariables.set(\"product-price\", price);\r",
									"\r",
									"let desc = Math.random().toString(36).substring(2);\r",
									"pm.collectionVariables.set(\"product-desc\", desc);\r",
									"\r",
									"let domain = Math.random().toString(36).substring(2, 10); // random domain\r",
									"let tld = ['.com', '.net', '.org', '.io'][Math.floor(Math.random() * 4)]; // random TLD\r",
									"let path = Math.random().toString(36).substring(2, 8); // random path\r",
									"\r",
									"let image = \"https://\" + domain + tld;\r",
									"\r",
									"pm.collectionVariables.set(\"product-img\", image);\r",
									"\r",
									"let category = Math.random().toString(36).substring(2);\r",
									"pm.collectionVariables.set(\"product-cate\", category);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\" : \"{{product-title}}\",\r\n    \"price\" : \"{{product-price}}\",\r\n    \"description\" : \"{{product-desc}}\",\r\n    \"image\": \"{{product-img}}\",\r\n    \"category\": \"{{product-cate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{online-store-url}}products/{{created-id}}",
							"host": [
								"{{online-store-url}}products"
							],
							"path": [
								"{{created-id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"pm.globals.set(\"online-store-url\", \"https://fakestoreapi.com/\");\r",
					"\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "product-title",
			"value": ""
		},
		{
			"key": "product-price",
			"value": ""
		},
		{
			"key": "product-desc",
			"value": ""
		},
		{
			"key": "product-img",
			"value": ""
		},
		{
			"key": "product-cate",
			"value": ""
		},
		{
			"key": "created-id",
			"value": ""
		},
		{
			"key": "product-id",
			"value": ""
		},
		{
			"key": "product-limit",
			"value": ""
		},
		{
			"key": "product-sort",
			"value": ""
		},
		{
			"key": "product-category",
			"value": ""
		}
	]
}